paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
                name: { type: string }
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: Login successful }
        '401': { description: Unauthorized }

  /auth/google:
    post:
      tags: [Auth]
      summary: Authenticate with Google OAuth token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
      responses:
        '200': { description: Google authentication successful }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out current session
      responses:
        '204': { description: Logged out }

  /auth/verify-email/{token}:
    get:
      tags: [Auth]
      summary: Verify user's email via token
      parameters:
        - name: token
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Email verified }

  /auth/resend-verification:
    post:
      tags: [Auth]
      summary: Resend email verification link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
      responses:
        '200': { description: Verification email resent }

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: Password reset email sent }

  /auth/reset-password/{token}:
    post:
      tags: [Auth]
      summary: Reset password using token
      parameters:
        - name: token
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password: { type: string }
      responses:
        '200': { description: Password reset }

  /auth/check-email:
    post:
      tags: [Auth]
      summary: Check if email exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: Email available or taken }

  /auth/refresh-token:
    post:
      tags: [Auth]
      summary: Refresh access token using refresh token
      responses:
        '200': { description: Token refreshed }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user's profile (auth required)
      security:
        - bearerAuth: []
      responses:
        '200': { description: User profile returned }

  /auth/change-password:
    patch:
      tags: [Auth]
      summary: Change password (auth + email verified required)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        '200': { description: Password changed }
